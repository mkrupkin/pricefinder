<?php
// backend/setup_database.php
// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å —Ç–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö

require_once 'vendor/autoload.php';

$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();

try {
    $pdo = new PDO(
        "mysql:host={$_ENV['DB_HOST']};dbname={$_ENV['DB_DATABASE']};charset=utf8mb4",
        $_ENV['DB_USERNAME'],
        $_ENV['DB_PASSWORD'],
        [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
        ]
    );

    echo "–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–µ!\n\n";

    // –ß–∏—Ç–∞—î–º–æ —Ç–∞ –≤–∏–∫–æ–Ω—É—î–º–æ SQL —Ñ–∞–π–ª
    $sql = file_get_contents(__DIR__ . '/database/migrations/001_create_tables.sql');

    // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –æ–∫—Ä–µ–º—ñ –∑–∞–ø–∏—Ç–∏
    $statements = array_filter(
        array_map('trim', explode(';', $sql)),
        function($stmt) {
            return !empty($stmt) && !str_starts_with($stmt, '--');
        }
    );

    echo "–í–∏–∫–æ–Ω–∞–Ω–Ω—è " . count($statements) . " SQL –∑–∞–ø–∏—Ç—ñ–≤...\n";

    foreach ($statements as $i => $statement) {
        if (trim($statement)) {
            echo ($i + 1) . ". ";
            try {
                $pdo->exec($statement);

                // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó
                if (str_contains(strtoupper($statement), 'CREATE TABLE')) {
                    preg_match('/CREATE TABLE.*?(\w+)/i', $statement, $matches);
                    $tableName = $matches[1] ?? 'unknown';
                    echo "–°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é: {$tableName}\n";
                } elseif (str_contains(strtoupper($statement), 'INSERT INTO')) {
                    preg_match('/INSERT INTO\s+(\w+)/i', $statement, $matches);
                    $tableName = $matches[1] ?? 'unknown';
                    echo "–î–æ–¥–∞–Ω–æ –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—é: {$tableName}\n";
                } else {
                    echo "–í–∏–∫–æ–Ω–∞–Ω–æ SQL –∫–æ–º–∞–Ω–¥—É\n";
                }

            } catch (PDOException $e) {
                echo "–ü–û–ú–ò–õ–ö–ê: " . $e->getMessage() . "\n";

                // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                continue;
            }
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
    echo "\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å:\n";
    $result = $pdo->query("SHOW TABLES");
    $tables = $result->fetchAll(PDO::FETCH_COLUMN);

    foreach ($tables as $table) {
        $countResult = $pdo->query("SELECT COUNT(*) as count FROM {$table}");
        $count = $countResult->fetch()['count'];
        echo "‚úÖ {$table}: {$count} –∑–∞–ø–∏—Å—ñ–≤\n";
    }

    echo "\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!\n";

} catch (PDOException $e) {
    echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: " . $e->getMessage() . "\n";
    echo "\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n";
    echo "1. –ß–∏ –∑–∞–ø—É—â–µ–Ω–∏–π MySQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: docker-compose ps\n";
    echo "2. –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ\n";
    echo "3. –ß–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö: docker-compose exec mysql mysql -u root -prootpassword -e 'SHOW DATABASES;'\n";
}